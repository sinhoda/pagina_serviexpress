# Generated by Django 4.2.7 on 2023-11-23 20:23

from django.db import migrations, models
import django.db.models.deletion
import taller.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Auto",
            fields=[
                (
                    "patente",
                    models.CharField(max_length=6, primary_key=True, serialize=False),
                ),
                ("marca", models.CharField(max_length=200)),
                ("modelo", models.CharField(max_length=200)),
                ("anio_auto", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Categoria_producto",
            fields=[
                ("id_categoria", models.AutoField(primary_key=True, serialize=False)),
                ("nombre_categoria", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Estado_civil",
            fields=[
                (
                    "id_estado_civil",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("estado_civil", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Reserva",
            fields=[
                ("id_reserva", models.AutoField(primary_key=True, serialize=False)),
                ("precio", models.IntegerField(default=0)),
                ("fecha_solicitud", models.DateField(auto_now_add=True)),
                ("fecha_realizar", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Rubro",
            fields=[
                ("id_rubro", models.AutoField(primary_key=True, serialize=False)),
                ("nombre_rubro", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Servicio",
            fields=[
                ("id_servicio", models.AutoField(primary_key=True, serialize=False)),
                ("nombre_servicio", models.CharField(max_length=200)),
                ("descripcion", models.CharField(max_length=200)),
                ("precio", models.IntegerField(default=1)),
                ("imagenUrl", models.ImageField(upload_to="imagenesServicios")),
            ],
        ),
        migrations.CreateModel(
            name="Taller",
            fields=[
                ("id_taller", models.AutoField(primary_key=True, serialize=False)),
                ("nombre", models.CharField(max_length=200)),
                ("direccion", models.CharField(max_length=200)),
                ("telefono", models.IntegerField(default=0)),
                ("ciudad", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Tipo_empleado",
            fields=[
                (
                    "id_tipo_empleado",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("tipo_empleado", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Tipo_usuario",
            fields=[
                (
                    "id_tipo_usuario",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("tipo_usuario", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Proveedor",
            fields=[
                ("id_proveedor", models.AutoField(primary_key=True, serialize=False)),
                ("nombre_proveedor", models.CharField(max_length=200)),
                ("telefono", models.IntegerField()),
                ("correo_electronico", models.CharField(max_length=200)),
                (
                    "informacion_extra",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "rubro",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="taller.rubro"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Producto",
            fields=[
                ("id_producto", models.AutoField(primary_key=True, serialize=False)),
                ("nombre_producto", models.CharField(max_length=200)),
                ("precio", models.IntegerField(default=0)),
                ("descripcion", models.CharField(max_length=200)),
                ("imagenUrl", models.ImageField(upload_to="imagenesProducto")),
                ("stock", models.IntegerField(default=0)),
                (
                    "categoria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taller.categoria_producto",
                    ),
                ),
                (
                    "proveedor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taller.proveedor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Detalle_reserva",
            fields=[
                (
                    "id_detalle_reserva",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "FK_servicio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taller.servicio",
                    ),
                ),
                (
                    "id_reserva",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="taller.reserva"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, default="", max_length=254, unique=True
                    ),
                ),
                ("nombre", models.CharField(blank=True, max_length=200)),
                ("rut", models.IntegerField(blank=True, null=True)),
                ("ap_paterno", models.CharField(blank=True, max_length=200)),
                ("ap_materno", models.CharField(blank=True, max_length=200)),
                ("direccion", models.CharField(blank=True, max_length=200)),
                ("numero_contacto", models.IntegerField(blank=True, null=True)),
                ("is_empleado", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", taller.models.CustomUserManager()),
            ],
        ),
    ]
